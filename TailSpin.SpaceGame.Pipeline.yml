name: $(Major).$(Minor).$(Patch)
trigger: none
     
variables:
  Major: '1'
  Minor: '1'
  Patch: $[counter(format('{0}.{1}', variables['Major'], variables['Minor']), 0)]
  buildConfiguration: 'Release'
  dotnetSdkVersion: '3.1.100'
  region: 'West US'
  appresourcegroup: $(appName)-$(System.StageName)-rg
  dbresourcegroup: $(appName)-rg
  serviceConnection: SpaceGame-NonProd # Service connection uses service principal, prod requires approval
  appName: 'tailspin-space-game'
  appservicename: $(appName)-$(System.StageName)-$(appID)
  appserviceplan: $(appName)-service-plan
  SITE_URL: 'https://$(appName)-$(System.StageName)-$(appID).azurewebsites.net'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  storageAccountName: 'spacegamedbstorage2134'
  sqlServerName: '$(appName)-sql-3145'
  dbName: 'tailspindatabase'
 
resources:
  repositories:
    - repository: templates 
      type: github
      name: MarcusFelling/Demo.Templates
      endpoint: templates

stages:
- stage: 'Build'
  jobs: 
  - job: 'BuildApp'
    pool:
      vmImage: 'vs2017-win2016'
      demands:
        - npm
        
    steps:
    - task: DotNetCoreInstaller@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        packageType: sdk
        version: '$(dotnetSdkVersion)'
        
    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-reportgenerator-globaltool'
        
    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        publishTestResults: true
        projects: '**/*.Tests.csproj'
        testRunTitle: 'Unit Tests'

    - script: |
        reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
      displayName: 'Create code coverage report'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/Tailspin.SpaceGame.Web.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: dropApp

  - job: BuildDacpac
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: VSBuild@1
      displayName: 'Build the database project'
      inputs:
        project: '**/*.sqlproj'

    - task: CopyFiles@2
      displayName: 'Copy dacpac file to staging directory'
      inputs:
        contents: |
          Tailspin.SpaceGame.Database/bin/**/*.dacpac
        targetFolder: '$(Build.StagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: dropDacpac
      condition: succeededOrFailed()

  - job: BuildBicep
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        # Fetch the latest Bicep CLI binary
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        # Mark it as executable
        chmod +x ./bicep
        # Add bicep to your PATH (requires admin)
        sudo mv ./bicep /usr/local/bin/bicep
        # Verify you can now access the 'bicep' command
        bicep --help
        # Done!
      displayName: 'Install Bicep'
      
    - script: |
        bicep build Tailspin.SpaceGame.Bicep/main.bicep
      displayName: 'Run Bicep Build'      

    - task: CopyFiles@2
      displayName: 'Copy ARM Template (.json) files to staging directory'
      inputs:
        contents: |
          Tailspin.SpaceGame.Bicep/**/*.json
        targetFolder: '$(Build.StagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact' 
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: dropARM
      condition: succeededOrFailed()

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn:
  - Build 
  condition: succeeded('Build')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-2019'
    environment: dev
    variables:
    - group: SpaceGame
    - name: appID
      value: $(Build.BuildId)    
    strategy:
      runOnce:
        deploy:
          steps:
          - template: spacegame-bicep-deploy.yml@templates

- stage: DBAVerificationScript
  displayName: 'Script database schema changes'
  dependsOn: Build
  jobs:
  - deployment: DBAVerificationScript
    pool:
      vmImage: 'windows-2019'
    variables:
    - group: SpaceGame
    environment: 'dbaverificationscript'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropDacpac
            patterns: '**/*'
          - task: SqlAzureDacpacDeployment@1
            displayName: Generate schema change script
            inputs:
              azureSubscription: '$(serviceConnection)'
              authenticationType: 'server'
              serverName: '$(servername).database.windows.net'
              databaseName: '$(databasename)'
              sqlUsername: '$(adminlogin)'
              sqlPassword: '$(adminPassword)'
              deployType: 'DacpacTask'
              deploymentAction: 'Script'
              dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac'
              ipDetectionMethod: 'AutoDetect'
          - task: PowerShell@2
            displayName: Show Auto Generated SQL Script
            inputs:
              targetType: 'inline'
              script: | 
                Write-Host "Auto Generated SQL Update Script:"
                Get-Content $(Build.SourcesDirectory)\GeneratedOutputFiles\$(databasename)_Script.sql | foreach {Write-Output $_}
          - task: PowerShell@2
            displayName: Show change script and check for schema changes
            inputs:
              targetType: 'inline'
              script: | 
                # Print the schema change script
                Write-Host "Auto Generated SQL Update Script:"
                Get-Content $(Build.SourcesDirectory)\GeneratedOutputFiles\$(databasename)_Script.sql | foreach {Write-Output $_}

                # Check for schema changes
                $file = Get-Content "$(Build.SourcesDirectory)\GeneratedOutputFiles\$(databasename)_Script.sql"
                $containsWord = $file | %{$_ -match "CREATE" -or $_ -match "ALTER" -or $_ -match "DROP"}
                if ($containsWord -contains $true) {
                  Install-Module VSTeam -Scope CurrentUser -Force
                  Set-VSTeamAccount â€“Account $(System.CollectionUri) -PersonalAccessToken $(PAT)
                  $methodParameters = @{
                    ProjectName = "$(System.TeamProject)"
                    Name = "SpaceGame"}
                  $vg = Get-VSTeamVariableGroup @methodParameters
                  $vars = @{}
                  $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
                  $varName = "schemaChanged"
                  $vars.$varName= @{}
                  $vars.$varName.value = "True"
                  $vars.$varName.isSecret = $false
                  $methodParameters = @{
                    id = $vg.id
                    ProjectName = "$(System.TeamProject)"
                    Name = "SpaceGame"
                    Description = ""
                    Type = "Vsts"
                    Variables = $vars}
                  Update-VSTeamVariableGroup @methodParameters}

- stage: DBAVerificationApply
  variables: 
    - group: SpaceGame
  displayName: 'Apply database schema changes'
  dependsOn: DBAVerificationScript
  condition: and(succeeded('DBAVerificationScript'), eq(variables['schemaChanged'], True))
  jobs:
  - deployment: DBAVerificationApply
    pool:
      vmImage: 'windows-2019'
    variables:
    - group: SpaceGame
    environment: 'dbaverificationapply'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropDacpac
            patterns: '**/*'
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Deploy SQL schema'
            inputs:
              azureSubscription: '$(serviceConnection)'
              authenticationType: 'server'
              serverName: '$(servername).database.windows.net'
              databaseName: '$(databasename)'
              sqlUsername: '$(adminlogin)'
              sqlPassword: '$(adminPassword)'
              deployType: 'DacpacTask'
              deploymentAction: 'Publish'
              dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac'
              ipDetectionMethod: 'AutoDetect'
          - task: PowerShell@2
            displayName: 'Remove "schemaChanged" pipeline variable'
            inputs:
              targetType: 'inline'
              script: | 
                Install-Module VSTeam -Scope CurrentUser -Force
                Set-VSTeamAccount â€“Account $(System.CollectionUri) -PersonalAccessToken $(PAT)
                $methodParameters = @{
                  ProjectName = "$(System.TeamProject)"
                  Name = "SpaceGame"}
                $vg = Get-VSTeamVariableGroup  @methodParameters 
                $vars = @{}
                $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
                $vars.Remove("schemaChanged")
                $methodParameters = @{
                  id = $vg.id
                  ProjectName = "$(System.TeamProject)"
                  Name = "SpaceGame"
                  Description = ""
                  Type = "Vsts"
                  Variables = $vars}
                Update-VSTeamVariableGroup @methodParameters

- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn:
  - Dev
  condition: |
    and
    (
      succeeded('DBAVeBuirificationScript'),
      succeeded('DBAVeBuirificationScript'),
      in(dependencies.DBAVerificationApply.result, 'Succeeded', 'Skipped')
    )  
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-2019'
    environment: test
    variables:      
    - group: SpaceGame
    - name: appID
      value: '26178'  
    strategy:
      runOnce:
        deploy:
          steps:
          - template: spacegame-bicep-deploy.yml@templates
  - job: RunUITests
    dependsOn: Deploy
    displayName: 'Run UI tests'
    pool:
      vmImage: 'vs2017-win2016'
    variables:    
    - group: SpaceGame
    steps:
    - template: functional-tests.yml@templates
  - job: RunLoadTests
    dependsOn: Deploy
    displayName: 'Run load tests'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      jmeterVersion: '5.2'
    steps: 
    - template: load-tests.yml@templates

- stage: 'Prod' 
  displayName: 'Deploy to the Production environment'
  dependsOn: Test
  condition: succeeded('Test')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-2019'
    environment: prod
    variables:
    - group: SpaceGame
    - name:  serviceConnection
      value: SpaceGame-Prod
    - name: appID
      value: '26178' 
    strategy:
      runOnce:
        deploy:
          steps:
          - template: spacegame-bicep-deploy.yml@templates

- stage: 'Cleanup'
  displayName: 'Cleanup dev environment'
  dependsOn:
  - Prod 
  condition: succeeded('Prod')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-2019'
    environment: dev 
    variables:
    - group: SpaceGame
    - name: appID
      value: $(Build.BuildId)    
    strategy:
      runOnce: 
        deploy:
          steps:
          - task: AzureCLI@2
            inputs:
                azureSubscription: $(serviceConnection)
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: 'az group delete -n $(appName)-Dev-rg'